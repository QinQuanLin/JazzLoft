/// <reference types="marked" />
import { HttpClient } from '@angular/common/http';
import { InjectionToken, SecurityContext } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Observable } from 'rxjs';
import { KatexOptions } from './katex-options';
import { MarkedOptions } from './marked-options';
import { MarkedRenderer } from './marked-renderer';
import * as ɵngcc0 from '@angular/core';
export declare const errorKatexNotLoaded = "[ngx-markdown When using the [katex] attribute you *have to* include KaTeX files to `angular.json` or use imports. See README for more information";
export declare const errorSrcWithoutHttpClient = "[ngx-markdown] When using the [src] attribute you *have to* pass the `HttpClient` as a parameter of the `forRoot` method. See README for more information";
export declare const SECURITY_CONTEXT: InjectionToken<SecurityContext>;
export declare class MarkdownService {
    private platform;
    private securityContext;
    private http;
    private sanitizer;
    private readonly initialMarkedOptions;
    private _options;
    get options(): MarkedOptions;
    set options(value: MarkedOptions);
    get renderer(): MarkedRenderer;
    set renderer(value: MarkedRenderer);
    constructor(platform: Object, securityContext: SecurityContext, http: HttpClient, options: MarkedOptions, sanitizer: DomSanitizer);
    compile(markdown: string, decodeHtml?: boolean, markedOptions?: MarkedOptions): string;
    getSource(src: string): Observable<string>;
    highlight(element?: Element | Document): void;
    renderKatex(html: string, options?: KatexOptions): string;
    private decodeHtml;
    private handleExtension;
    private trimIndentation;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MarkdownService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<MarkdownService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24uc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJtYXJrZG93bi5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkEiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cIm1hcmtlZFwiIC8+XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEluamVjdGlvblRva2VuLCBTZWN1cml0eUNvbnRleHQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgS2F0ZXhPcHRpb25zIH0gZnJvbSAnLi9rYXRleC1vcHRpb25zJztcclxuaW1wb3J0IHsgTWFya2VkT3B0aW9ucyB9IGZyb20gJy4vbWFya2VkLW9wdGlvbnMnO1xyXG5pbXBvcnQgeyBNYXJrZWRSZW5kZXJlciB9IGZyb20gJy4vbWFya2VkLXJlbmRlcmVyJztcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgZXJyb3JLYXRleE5vdExvYWRlZCA9IFwiW25neC1tYXJrZG93biBXaGVuIHVzaW5nIHRoZSBba2F0ZXhdIGF0dHJpYnV0ZSB5b3UgKmhhdmUgdG8qIGluY2x1ZGUgS2FUZVggZmlsZXMgdG8gYGFuZ3VsYXIuanNvbmAgb3IgdXNlIGltcG9ydHMuIFNlZSBSRUFETUUgZm9yIG1vcmUgaW5mb3JtYXRpb25cIjtcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgZXJyb3JTcmNXaXRob3V0SHR0cENsaWVudCA9IFwiW25neC1tYXJrZG93bl0gV2hlbiB1c2luZyB0aGUgW3NyY10gYXR0cmlidXRlIHlvdSAqaGF2ZSB0byogcGFzcyB0aGUgYEh0dHBDbGllbnRgIGFzIGEgcGFyYW1ldGVyIG9mIHRoZSBgZm9yUm9vdGAgbWV0aG9kLiBTZWUgUkVBRE1FIGZvciBtb3JlIGluZm9ybWF0aW9uXCI7XHJcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFNFQ1VSSVRZX0NPTlRFWFQ6IEluamVjdGlvblRva2VuPFNlY3VyaXR5Q29udGV4dD47XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1hcmtkb3duU2VydmljZSB7XHJcbiAgICBwcml2YXRlIHBsYXRmb3JtO1xyXG4gICAgcHJpdmF0ZSBzZWN1cml0eUNvbnRleHQ7XHJcbiAgICBwcml2YXRlIGh0dHA7XHJcbiAgICBwcml2YXRlIHNhbml0aXplcjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgaW5pdGlhbE1hcmtlZE9wdGlvbnM7XHJcbiAgICBwcml2YXRlIF9vcHRpb25zO1xyXG4gICAgZ2V0IG9wdGlvbnMoKTogTWFya2VkT3B0aW9ucztcclxuICAgIHNldCBvcHRpb25zKHZhbHVlOiBNYXJrZWRPcHRpb25zKTtcclxuICAgIGdldCByZW5kZXJlcigpOiBNYXJrZWRSZW5kZXJlcjtcclxuICAgIHNldCByZW5kZXJlcih2YWx1ZTogTWFya2VkUmVuZGVyZXIpO1xyXG4gICAgY29uc3RydWN0b3IocGxhdGZvcm06IE9iamVjdCwgc2VjdXJpdHlDb250ZXh0OiBTZWN1cml0eUNvbnRleHQsIGh0dHA6IEh0dHBDbGllbnQsIG9wdGlvbnM6IE1hcmtlZE9wdGlvbnMsIHNhbml0aXplcjogRG9tU2FuaXRpemVyKTtcclxuICAgIGNvbXBpbGUobWFya2Rvd246IHN0cmluZywgZGVjb2RlSHRtbD86IGJvb2xlYW4sIG1hcmtlZE9wdGlvbnM/OiBNYXJrZWRPcHRpb25zKTogc3RyaW5nO1xyXG4gICAgZ2V0U291cmNlKHNyYzogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gICAgaGlnaGxpZ2h0KGVsZW1lbnQ/OiBFbGVtZW50IHwgRG9jdW1lbnQpOiB2b2lkO1xyXG4gICAgcmVuZGVyS2F0ZXgoaHRtbDogc3RyaW5nLCBvcHRpb25zPzogS2F0ZXhPcHRpb25zKTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBkZWNvZGVIdG1sO1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVFeHRlbnNpb247XHJcbiAgICBwcml2YXRlIHRyaW1JbmRlbnRhdGlvbjtcclxufVxyXG4iXX0=