import { AfterViewInit, ElementRef, EventEmitter, OnChanges } from '@angular/core';
import { KatexOptions } from './katex-options';
import { MarkdownService } from './markdown.service';
import * as ɵngcc0 from '@angular/core';
export declare class MarkdownComponent implements OnChanges, AfterViewInit {
    element: ElementRef<HTMLElement>;
    markdownService: MarkdownService;
    data: string;
    src: string;
    get katex(): boolean;
    set katex(value: boolean);
    katexOptions: KatexOptions;
    get lineNumbers(): boolean;
    set lineNumbers(value: boolean);
    start: number;
    get lineHighlight(): boolean;
    set lineHighlight(value: boolean);
    line: string | string[];
    lineOffset: number;
    error: EventEmitter<string>;
    load: EventEmitter<string>;
    ready: EventEmitter<void>;
    private _katex;
    private _lineHighlight;
    private _lineNumbers;
    constructor(element: ElementRef<HTMLElement>, markdownService: MarkdownService);
    ngOnChanges(): void;
    ngAfterViewInit(): void;
    render(markdown: string, decodeHtml?: boolean): void;
    private coerceBooleanProperty;
    private handleData;
    private handleSrc;
    private handleTransclusion;
    private handlePlugins;
    private setPluginClass;
    private setPluginOptions;
    private toLispCase;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MarkdownComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MarkdownComponent, "markdown, [markdown]", never, {
    "katex": "katex";
    "lineNumbers": "lineNumbers";
    "lineHighlight": "lineHighlight";
    "data": "data";
    "src": "src";
    "katexOptions": "katexOptions";
    "start": "start";
    "line": "line";
    "lineOffset": "lineOffset";
}, {
    "error": "error";
    "load": "load";
    "ready": "ready";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm1hcmtkb3duLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBLYXRleE9wdGlvbnMgfSBmcm9tICcuL2thdGV4LW9wdGlvbnMnO1xyXG5pbXBvcnQgeyBNYXJrZG93blNlcnZpY2UgfSBmcm9tICcuL21hcmtkb3duLnNlcnZpY2UnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNYXJrZG93bkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgICBlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PjtcclxuICAgIG1hcmtkb3duU2VydmljZTogTWFya2Rvd25TZXJ2aWNlO1xyXG4gICAgZGF0YTogc3RyaW5nO1xyXG4gICAgc3JjOiBzdHJpbmc7XHJcbiAgICBnZXQga2F0ZXgoKTogYm9vbGVhbjtcclxuICAgIHNldCBrYXRleCh2YWx1ZTogYm9vbGVhbik7XHJcbiAgICBrYXRleE9wdGlvbnM6IEthdGV4T3B0aW9ucztcclxuICAgIGdldCBsaW5lTnVtYmVycygpOiBib29sZWFuO1xyXG4gICAgc2V0IGxpbmVOdW1iZXJzKHZhbHVlOiBib29sZWFuKTtcclxuICAgIHN0YXJ0OiBudW1iZXI7XHJcbiAgICBnZXQgbGluZUhpZ2hsaWdodCgpOiBib29sZWFuO1xyXG4gICAgc2V0IGxpbmVIaWdobGlnaHQodmFsdWU6IGJvb2xlYW4pO1xyXG4gICAgbGluZTogc3RyaW5nIHwgc3RyaW5nW107XHJcbiAgICBsaW5lT2Zmc2V0OiBudW1iZXI7XHJcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPHN0cmluZz47XHJcbiAgICBsb2FkOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIHJlYWR5OiBFdmVudEVtaXR0ZXI8dm9pZD47XHJcbiAgICBwcml2YXRlIF9rYXRleDtcclxuICAgIHByaXZhdGUgX2xpbmVIaWdobGlnaHQ7XHJcbiAgICBwcml2YXRlIF9saW5lTnVtYmVycztcclxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LCBtYXJrZG93blNlcnZpY2U6IE1hcmtkb3duU2VydmljZSk7XHJcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XHJcbiAgICByZW5kZXIobWFya2Rvd246IHN0cmluZywgZGVjb2RlSHRtbD86IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBjb2VyY2VCb29sZWFuUHJvcGVydHk7XHJcbiAgICBwcml2YXRlIGhhbmRsZURhdGE7XHJcbiAgICBwcml2YXRlIGhhbmRsZVNyYztcclxuICAgIHByaXZhdGUgaGFuZGxlVHJhbnNjbHVzaW9uO1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVQbHVnaW5zO1xyXG4gICAgcHJpdmF0ZSBzZXRQbHVnaW5DbGFzcztcclxuICAgIHByaXZhdGUgc2V0UGx1Z2luT3B0aW9ucztcclxuICAgIHByaXZhdGUgdG9MaXNwQ2FzZTtcclxufVxyXG4iXX0=